{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuth } from './context/AuthContext';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\nconst useTransactions = title => {\n  _s();\n  resetCategories();\n  const {\n    currentUser\n  } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData();\n  const rightTransactions = transactions.filter(t => t.type === title);\n  const total = rightTransactions.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n  rightTransactions.forEach(t => {\n    const category = categories.find(c => c.type === t.category);\n    if (category) category.amount += t.amount;\n  });\n  const filteredCategories = categories.filter(sc => sc.amount > 0);\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map(c => c.amount),\n      backgroundColor: filteredCategories.map(c => c.color)\n    }],\n    labels: filteredCategories.map(c => c.type)\n  };\n  return {\n    filteredCategories,\n    total,\n    chartData\n  };\n};\n_s(useTransactions, \"iv+U2rIKOdiN/5LeQqa8pRNDS54=\", false, function () {\n  return [useAuth];\n});\nexport default useTransactions;","map":{"version":3,"names":["useState","useAuth","incomeCategories","expenseCategories","resetCategories","useTransactions","title","_s","currentUser","transactions","setTransactions","fetchData","response","fetch","method","headers","body","JSON","stringify","email","data","json","error","console","log","rightTransactions","filter","t","type","total","reduce","acc","curr","amount","categories","forEach","category","find","c","filteredCategories","sc","chartData","datasets","map","backgroundColor","color","labels"],"sources":["/home/parshwa/Downloads/project/Money-tracker/frontend/src/useTransactions.js"],"sourcesContent":["import { useState } from 'react';\nimport { useAuth } from './context/AuthContext';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\n\nconst useTransactions = (title) => {\n  resetCategories();\n  const { currentUser } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData()\n  const rightTransactions = transactions.filter((t) => t.type === title);\n  const total = rightTransactions.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n\n  rightTransactions.forEach((t) => {\n    const category = categories.find((c) => c.type === t.category);\n\n    if (category) category.amount += t.amount;\n  });\n\n  const filteredCategories = categories.filter((sc) => sc.amount > 0);\n\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map((c) => c.amount),\n      backgroundColor: filteredCategories.map((c) => c.color),\n    }],\n    labels: filteredCategories.map((c) => c.type),\n  };\n\n  return { filteredCategories, total, chartData };\n};\n\nexport default useTransactions;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,wBAAwB;AAE7F,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjCH,eAAe,EAAE;EACjB,MAAM;IAAEI;EAAY,CAAC,GAAGP,OAAO,EAAE;EACjC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEX,WAAW,CAACW;QACrB,CAAC;MACH,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCX,eAAe,CAACU,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;IAC7B;EACF,CAAC;EACDX,SAAS,EAAE;EACX,MAAMc,iBAAiB,GAAGhB,YAAY,CAACiB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKtB,KAAK,CAAC;EACtE,MAAMuB,KAAK,GAAGJ,iBAAiB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IACpD,OAAOD,GAAG,GAAGC,IAAI,CAACC,MAAM;EAC1B,CAAC,EAAE,CAAC,CAAC;EACL,MAAMC,UAAU,GAAG5B,KAAK,KAAK,QAAQ,GAAGJ,gBAAgB,GAAGC,iBAAiB;EAE5EsB,iBAAiB,CAACU,OAAO,CAAER,CAAC,IAAK;IAC/B,MAAMS,QAAQ,GAAGF,UAAU,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACV,IAAI,KAAKD,CAAC,CAACS,QAAQ,CAAC;IAE9D,IAAIA,QAAQ,EAAEA,QAAQ,CAACH,MAAM,IAAIN,CAAC,CAACM,MAAM;EAC3C,CAAC,CAAC;EAEF,MAAMM,kBAAkB,GAAGL,UAAU,CAACR,MAAM,CAAEc,EAAE,IAAKA,EAAE,CAACP,MAAM,GAAG,CAAC,CAAC;EAEnE,MAAMQ,SAAS,GAAG;IAChBC,QAAQ,EAAE,CAAC;MACTtB,IAAI,EAAEmB,kBAAkB,CAACI,GAAG,CAAEL,CAAC,IAAKA,CAAC,CAACL,MAAM,CAAC;MAC7CW,eAAe,EAAEL,kBAAkB,CAACI,GAAG,CAAEL,CAAC,IAAKA,CAAC,CAACO,KAAK;IACxD,CAAC,CAAC;IACFC,MAAM,EAAEP,kBAAkB,CAACI,GAAG,CAAEL,CAAC,IAAKA,CAAC,CAACV,IAAI;EAC9C,CAAC;EAED,OAAO;IAAEW,kBAAkB;IAAEV,KAAK;IAAEY;EAAU,CAAC;AACjD,CAAC;AAAClC,EAAA,CA7CIF,eAAe;EAAA,QAEKJ,OAAO;AAAA;AA6CjC,eAAeI,eAAe"},"metadata":{},"sourceType":"module"}